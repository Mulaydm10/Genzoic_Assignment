üì¶ GOAL:
Generate a complete, production-ready fullstack application called `Market-Pulse` with the following features.

---

üß† PROJECT PURPOSE:
A user enters a stock ticker (like MSFT), and the app:
1. Fetches the last 5 trading-day returns
2. Calculates a momentum score
3. Fetches 5 recent news headlines (mocked or real)
4. Sends both signals to Gemini (via API)
5. Gets back a pulse: bullish / neutral / bearish + explanation
6. Shows it in a simple React UI

---

üìÅ STRUCTURE:
Use this monorepo folder layout:
market-pulse/
‚îú‚îÄ‚îÄ backend/
‚îÇ ‚îú‚îÄ‚îÄ index.ts
‚îÇ ‚îú‚îÄ‚îÄ routes.ts
‚îÇ ‚îú‚îÄ‚îÄ momentum.ts
‚îÇ ‚îú‚îÄ‚îÄ news.ts
‚îÇ ‚îú‚îÄ‚îÄ gemini.ts
‚îÇ ‚îú‚îÄ‚îÄ cache.ts
‚îÇ ‚îî‚îÄ‚îÄ .env (with GEMINI_API_KEY)
‚îú‚îÄ‚îÄ frontend/
‚îÇ ‚îú‚îÄ‚îÄ src/
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ App.tsx
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ components/
‚îÇ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ TickerInput.tsx
‚îÇ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ ResponseCard.tsx
‚îÇ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ LoadingIndicator.tsx
‚îÇ ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ ErrorBox.tsx
‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ index.tsx
‚îÇ ‚îî‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ README.md

yaml
Copy
Edit

---

üöÄ BACKEND FEATURES (TypeScript + Node + Express):
- Endpoint: `GET /api/v1/market-pulse?ticker=XYZ`
- Accepts ticker as query param
- Fetches 5-day returns (mock if no real API)
- Calculates momentum score:
```ts
function calculateMomentumScore(returns: number[]): number {
  const sum = returns.reduce((acc, val) => acc + val, 0);
  return parseFloat((sum / returns.length).toFixed(2));
}
Fetches 5 recent news headlines (mocked or NewsAPI)

Calls Gemini with prompt like:

csharp
Copy
Edit
Given a stock with momentum score {score} and returns {array}, and the following news:
1. {title} - {desc}
...
What is the pulse (bullish/neutral/bearish) and why? Respond in JSON:
{
  "pulse": "bullish",
  "llm_explanation": "..."
}
Parses and merges LLM result into final JSON

Uses in-memory cache (object with TTL check) for 10 min

Uses @google/generative-ai for Gemini

.env example:

ini
Copy
Edit
GEMINI_API_KEY=AIzaSyAqdMZBl5Kip_UI4gPspxReKUKkrluWaqg
üíª FRONTEND FEATURES (React + Tailwind):

Input box for ticker

Submit button or Enter triggers API call

Displays llm_explanation in a card

Shows collapsible raw JSON

Loading state while fetching

Error message if fetch fails

Bonus: Sparkline for last 5 returns using recharts

üìù README.md should contain:

Setup instructions for backend + frontend

.env variable info

Sample CURL:

bash
Copy
Edit
curl http://localhost:3000/api/v1/market-pulse?ticker=AAPL
Architecture overview

Design decisions

"Next steps" (e.g., Docker, k8s, tests)

üìå FINAL NOTES:

Everything must be runnable locally after npm install in both backend and frontend

Do not hardcode the Gemini key in source files

Gemini integration must include prompt + JSON parsing

Do not implement CI/CD or Docker (optional)

üîß OUTPUT:
Generate the entire codebase so it can be downloaded, opened in Replit/VSC, and run with npm start (both backend and frontend).